object test {
sealed trait Json
case class JsonObject(v: Map[String, Json]) extends Json
case class JsonArray(v: Seq[Json]) extends Json
case class JsonString(v: String) extends Json

trait JsonConverter[A] {
  def convert(x: A): Json
}

def write(x: Json): String = x match {
  case JsonObject(kvs) => (for ((k,v) <- kvs) yield k + ": " + write(v)).mkString("{", ", ", "}")
  case JsonArray(vs) => vs map write mkString("[", ", ", "]")
  case JsonString(v) => "'" + v + "'"
}

def write[A](x: A)(implicit c: JsonConverter[A]): String = write(c.convert(x))

case class Student(name: String)

implicit object Student2Json extends JsonConverter[Student] {
  def convert(x: Student) = JsonObject(Map("name" -> JsonString(x.name)))
}

implicit def seq2json[T: JsonConverter]: JsonConverter[Seq[T]] = new JsonConverter[Seq[T]] {
  def convert(x: Seq[T]) = JsonArray(x.map(implicitly[JsonConverter[T]].convert))
}

implicit class JsonWriter[T : JsonConverter](that: T) {
  def toJson(): String = write(that)
}

// 1.
Seq(Student("Alice")).toJson()
}